/*
Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.

Assume the environment does not allow you to store 64-bit integers (signed or unsigned).

 

Example 1:

Input: x = 123
Output: 321
Example 2:

Input: x = -123
Output: -321
Example 3:

Input: x = 120
Output: 21
Example 4:

Input: x = 0
Output: 0
 

Constraints:

-231 <= x <= 231 - 1
*/

class Solution 
{
    public int reverse(int x) 
    {
        boolean negative = false;
        String toReverse = Integer.toString(x);
        if (toReverse.charAt(0) == '-')
        {
            negative = true;
            String temp = "";
            for (int i = 1; i < toReverse.length(); i++)
            {
                temp = temp + toReverse.charAt(i);
            }
            toReverse = temp;
        }
        String toCast = "";
        for (int i = toReverse.length()-1; i >= 0; i--)
        {
            toCast = toCast + toReverse.charAt(i);
        }
        int answer;
        try
        {
            answer = Integer.parseInt(toCast);
            if (negative)
            {
                answer = -answer;
            }
            return answer;
        }
        catch (NumberFormatException e)
        {
            return 0;
        }
    }
}
